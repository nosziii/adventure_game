# docker-compose.yml

services:
  nginx_proxy:
    image: nginx:1.27-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # A konfigurációs fájl csatolása
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      # Az SSL tanúsítványok csatolása
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/ssl_bleesound:/etc/nginx/ssl_bleesound
    networks:
      - kalandjatek-network
    depends_on:
      - backend
      - frontend
  # Adatbázis (PostgreSQL)
  db:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME}_db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Perzisztens tárolás Docker volume-mal
      # Alternatíva: - ./database/data:/var/lib/postgresql/data # Mappa csatolása
    ports:
      - "5433:5432"
    networks:
      - kalandjatek-network
    healthcheck: # Egyszerű monitoring: megvárja, amíg a DB készen áll
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend (NestJS API)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_backend
    restart: unless-stopped
    depends_on:
      db: # Várja meg, amíg az adatbázis elindul és "healthy" lesz
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app # Kód csatolása a hot-reloadhoz
      - /usr/src/app/node_modules # Ne csatolja a helyi node_modules-t
    # ports:
    #   - "${BACKEND_PORT}:${BACKEND_PORT}" # Port mapping a host és konténer között
    environment:
      - NODE_ENV=${NODE_ENV}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${BACKEND_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION_TIME=${JWT_EXPIRATION_TIME}
      # Egyéb környezeti változók...
    networks:
      - kalandjatek-network
    command: npm run start:dev # Fejlesztői indítás
  # Frontend (Vue.js SPA) - ÉLES (PRODUCTION) VERZIÓ
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_frontend
    restart: unless-stopped
    depends_on:
      - backend
    # ports:
    #   # A gép ${FRONTEND_PORT} portját (alapból 5173) a konténer 80-as portjára irányítjuk, ahol az Nginx figyel.
    #   - "${FRONTEND_PORT:-5173}:80"
    networks:
      - kalandjatek-network

  # Knex Migrációs/Seeder konténer
  migrate:
    build:
      context: ./backend # Ugyanazt a környezetet használja, mint a backend
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_migrate
    profiles: ["tools"] # Csak akkor induljon, ha explicit kérjük (pl. docker compose --profile tools run migrate)
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=development # Vagy production, ha éles migrációt futtatsz
    volumes:
      - ./backend:/usr/src/app # Hozzáférés a knexfile-hoz és a migrációs fájlokhoz
      - node_modules_volume:/usr/src/app/node_modules
    networks:
      - kalandjatek-network
    # Az alapértelmezett parancs futtatja a legfrissebb migrációkat.
    # Seedeléshez külön parancs kell (lásd lent).
    command:
      [
        "npx",
        "knex",
        "migrate:latest",
        "--knexfile",
        "/usr/src/app/knexfile.js",
      ]

# Hálózat definiálása
networks:
  kalandjatek-network:
    driver: bridge

# Volume definiálása az adatbázis adatoknak
volumes:
  postgres_data:
    driver: local
  node_modules_volume:
